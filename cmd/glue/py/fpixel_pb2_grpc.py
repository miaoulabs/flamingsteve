# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import fpixel_pb2 as fpixel__pb2


class FlamePixelsStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ListSensors = channel.unary_unary(
        '/fpixels.FlamePixels/ListSensors',
        request_serializer=fpixel__pb2.EmptyRequest.SerializeToString,
        response_deserializer=fpixel__pb2.ListSensorsResponse.FromString,
        )
    self.GetSensorRawData = channel.unary_unary(
        '/fpixels.FlamePixels/GetSensorRawData',
        request_serializer=fpixel__pb2.SensorRawDataRequest.SerializeToString,
        response_deserializer=fpixel__pb2.SensorRawDataResponse.FromString,
        )
    self.ListDisplays = channel.unary_unary(
        '/fpixels.FlamePixels/ListDisplays',
        request_serializer=fpixel__pb2.EmptyRequest.SerializeToString,
        response_deserializer=fpixel__pb2.ListDisplaysResponse.FromString,
        )
    self.Draw = channel.unary_unary(
        '/fpixels.FlamePixels/Draw',
        request_serializer=fpixel__pb2.DrawRequest.SerializeToString,
        response_deserializer=fpixel__pb2.DrawRequest.FromString,
        )


class FlamePixelsServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def ListSensors(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetSensorRawData(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListDisplays(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Draw(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_FlamePixelsServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ListSensors': grpc.unary_unary_rpc_method_handler(
          servicer.ListSensors,
          request_deserializer=fpixel__pb2.EmptyRequest.FromString,
          response_serializer=fpixel__pb2.ListSensorsResponse.SerializeToString,
      ),
      'GetSensorRawData': grpc.unary_unary_rpc_method_handler(
          servicer.GetSensorRawData,
          request_deserializer=fpixel__pb2.SensorRawDataRequest.FromString,
          response_serializer=fpixel__pb2.SensorRawDataResponse.SerializeToString,
      ),
      'ListDisplays': grpc.unary_unary_rpc_method_handler(
          servicer.ListDisplays,
          request_deserializer=fpixel__pb2.EmptyRequest.FromString,
          response_serializer=fpixel__pb2.ListDisplaysResponse.SerializeToString,
      ),
      'Draw': grpc.unary_unary_rpc_method_handler(
          servicer.Draw,
          request_deserializer=fpixel__pb2.DrawRequest.FromString,
          response_serializer=fpixel__pb2.DrawRequest.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'fpixels.FlamePixels', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
