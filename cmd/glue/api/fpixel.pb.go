// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fpixel.proto

package fpixels

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Device_Type int32

const (
	Device_Unknown  Device_Type = 0
	Device_Display  Device_Type = 1
	Device_Sensor   Device_Type = 2
	Device_Presence Device_Type = 3
)

var Device_Type_name = map[int32]string{
	0: "Unknown",
	1: "Display",
	2: "Sensor",
	3: "Presence",
}

var Device_Type_value = map[string]int32{
	"Unknown":  0,
	"Display":  1,
	"Sensor":   2,
	"Presence": 3,
}

func (x Device_Type) String() string {
	return proto.EnumName(Device_Type_name, int32(x))
}

func (Device_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3e41b15012968299, []int{7, 0}
}

//
//RESQUESTS / RESPONSES
type EmptyRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyRequest) Reset()         { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()    {}
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e41b15012968299, []int{0}
}

func (m *EmptyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyRequest.Unmarshal(m, b)
}
func (m *EmptyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyRequest.Marshal(b, m, deterministic)
}
func (m *EmptyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyRequest.Merge(m, src)
}
func (m *EmptyRequest) XXX_Size() int {
	return xxx_messageInfo_EmptyRequest.Size(m)
}
func (m *EmptyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyRequest proto.InternalMessageInfo

type EmptyReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyReply) Reset()         { *m = EmptyReply{} }
func (m *EmptyReply) String() string { return proto.CompactTextString(m) }
func (*EmptyReply) ProtoMessage()    {}
func (*EmptyReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e41b15012968299, []int{1}
}

func (m *EmptyReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyReply.Unmarshal(m, b)
}
func (m *EmptyReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyReply.Marshal(b, m, deterministic)
}
func (m *EmptyReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyReply.Merge(m, src)
}
func (m *EmptyReply) XXX_Size() int {
	return xxx_messageInfo_EmptyReply.Size(m)
}
func (m *EmptyReply) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyReply.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyReply proto.InternalMessageInfo

type ListSensorsResponse struct {
	Sensors              []*Device `protobuf:"bytes,1,rep,name=sensors,proto3" json:"sensors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListSensorsResponse) Reset()         { *m = ListSensorsResponse{} }
func (m *ListSensorsResponse) String() string { return proto.CompactTextString(m) }
func (*ListSensorsResponse) ProtoMessage()    {}
func (*ListSensorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e41b15012968299, []int{2}
}

func (m *ListSensorsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSensorsResponse.Unmarshal(m, b)
}
func (m *ListSensorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSensorsResponse.Marshal(b, m, deterministic)
}
func (m *ListSensorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSensorsResponse.Merge(m, src)
}
func (m *ListSensorsResponse) XXX_Size() int {
	return xxx_messageInfo_ListSensorsResponse.Size(m)
}
func (m *ListSensorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSensorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSensorsResponse proto.InternalMessageInfo

func (m *ListSensorsResponse) GetSensors() []*Device {
	if m != nil {
		return m.Sensors
	}
	return nil
}

type SensorRawDataRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SensorRawDataRequest) Reset()         { *m = SensorRawDataRequest{} }
func (m *SensorRawDataRequest) String() string { return proto.CompactTextString(m) }
func (*SensorRawDataRequest) ProtoMessage()    {}
func (*SensorRawDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e41b15012968299, []int{3}
}

func (m *SensorRawDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SensorRawDataRequest.Unmarshal(m, b)
}
func (m *SensorRawDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SensorRawDataRequest.Marshal(b, m, deterministic)
}
func (m *SensorRawDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorRawDataRequest.Merge(m, src)
}
func (m *SensorRawDataRequest) XXX_Size() int {
	return xxx_messageInfo_SensorRawDataRequest.Size(m)
}
func (m *SensorRawDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorRawDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SensorRawDataRequest proto.InternalMessageInfo

func (m *SensorRawDataRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SensorRawDataResponse struct {
	Payload              string   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SensorRawDataResponse) Reset()         { *m = SensorRawDataResponse{} }
func (m *SensorRawDataResponse) String() string { return proto.CompactTextString(m) }
func (*SensorRawDataResponse) ProtoMessage()    {}
func (*SensorRawDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e41b15012968299, []int{4}
}

func (m *SensorRawDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SensorRawDataResponse.Unmarshal(m, b)
}
func (m *SensorRawDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SensorRawDataResponse.Marshal(b, m, deterministic)
}
func (m *SensorRawDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorRawDataResponse.Merge(m, src)
}
func (m *SensorRawDataResponse) XXX_Size() int {
	return xxx_messageInfo_SensorRawDataResponse.Size(m)
}
func (m *SensorRawDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorRawDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SensorRawDataResponse proto.InternalMessageInfo

func (m *SensorRawDataResponse) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type ListDisplaysResponse struct {
	Displays             []*Display `protobuf:"bytes,1,rep,name=displays,proto3" json:"displays,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListDisplaysResponse) Reset()         { *m = ListDisplaysResponse{} }
func (m *ListDisplaysResponse) String() string { return proto.CompactTextString(m) }
func (*ListDisplaysResponse) ProtoMessage()    {}
func (*ListDisplaysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e41b15012968299, []int{5}
}

func (m *ListDisplaysResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDisplaysResponse.Unmarshal(m, b)
}
func (m *ListDisplaysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDisplaysResponse.Marshal(b, m, deterministic)
}
func (m *ListDisplaysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDisplaysResponse.Merge(m, src)
}
func (m *ListDisplaysResponse) XXX_Size() int {
	return xxx_messageInfo_ListDisplaysResponse.Size(m)
}
func (m *ListDisplaysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDisplaysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDisplaysResponse proto.InternalMessageInfo

func (m *ListDisplaysResponse) GetDisplays() []*Display {
	if m != nil {
		return m.Displays
	}
	return nil
}

type DrawRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DrawRequest) Reset()         { *m = DrawRequest{} }
func (m *DrawRequest) String() string { return proto.CompactTextString(m) }
func (*DrawRequest) ProtoMessage()    {}
func (*DrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e41b15012968299, []int{6}
}

func (m *DrawRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DrawRequest.Unmarshal(m, b)
}
func (m *DrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DrawRequest.Marshal(b, m, deterministic)
}
func (m *DrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DrawRequest.Merge(m, src)
}
func (m *DrawRequest) XXX_Size() int {
	return xxx_messageInfo_DrawRequest.Size(m)
}
func (m *DrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DrawRequest proto.InternalMessageInfo

func (m *DrawRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

//
//DATA MODELS
type Device struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Model                string   `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	Hostname             string   `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e41b15012968299, []int{7}
}

func (m *Device) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Device.Unmarshal(m, b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Device.Marshal(b, m, deterministic)
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return xxx_messageInfo_Device.Size(m)
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Device) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Device) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type Display struct {
	Device               *Device  `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Width                uint32   `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height               uint32   `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Display) Reset()         { *m = Display{} }
func (m *Display) String() string { return proto.CompactTextString(m) }
func (*Display) ProtoMessage()    {}
func (*Display) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e41b15012968299, []int{8}
}

func (m *Display) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Display.Unmarshal(m, b)
}
func (m *Display) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Display.Marshal(b, m, deterministic)
}
func (m *Display) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Display.Merge(m, src)
}
func (m *Display) XXX_Size() int {
	return xxx_messageInfo_Display.Size(m)
}
func (m *Display) XXX_DiscardUnknown() {
	xxx_messageInfo_Display.DiscardUnknown(m)
}

var xxx_messageInfo_Display proto.InternalMessageInfo

func (m *Display) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *Display) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Display) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterEnum("fpixels.Device_Type", Device_Type_name, Device_Type_value)
	proto.RegisterType((*EmptyRequest)(nil), "fpixels.EmptyRequest")
	proto.RegisterType((*EmptyReply)(nil), "fpixels.EmptyReply")
	proto.RegisterType((*ListSensorsResponse)(nil), "fpixels.ListSensorsResponse")
	proto.RegisterType((*SensorRawDataRequest)(nil), "fpixels.SensorRawDataRequest")
	proto.RegisterType((*SensorRawDataResponse)(nil), "fpixels.SensorRawDataResponse")
	proto.RegisterType((*ListDisplaysResponse)(nil), "fpixels.ListDisplaysResponse")
	proto.RegisterType((*DrawRequest)(nil), "fpixels.DrawRequest")
	proto.RegisterType((*Device)(nil), "fpixels.Device")
	proto.RegisterType((*Display)(nil), "fpixels.Display")
}

func init() { proto.RegisterFile("fpixel.proto", fileDescriptor_3e41b15012968299) }

var fileDescriptor_3e41b15012968299 = []byte{
	// 594 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0xd1, 0x6e, 0xd3, 0x4a,
	0x10, 0xbd, 0x4e, 0xd2, 0xa4, 0x77, 0x62, 0xa7, 0xd6, 0x34, 0x85, 0xc8, 0x6a, 0x51, 0x58, 0x04,
	0x94, 0xaa, 0x8d, 0xd3, 0x22, 0xa4, 0xaa, 0x4f, 0x04, 0x02, 0xbc, 0xf0, 0x50, 0x19, 0xfa, 0xce,
	0x12, 0x2f, 0x8e, 0x55, 0x67, 0xd7, 0x78, 0x97, 0x9a, 0x08, 0x21, 0x21, 0x3e, 0x21, 0xbc, 0xf1,
	0x2f, 0x7c, 0x05, 0xbf, 0xc0, 0x87, 0x20, 0xaf, 0x1d, 0x27, 0x29, 0xe9, 0x53, 0x72, 0x66, 0xce,
	0xce, 0x39, 0x93, 0x39, 0x0a, 0x98, 0x1f, 0xe2, 0xf0, 0x33, 0x8b, 0x7a, 0x71, 0x22, 0x94, 0xc0,
	0x46, 0x8e, 0xa4, 0xb3, 0x1b, 0x08, 0x11, 0x44, 0xcc, 0xa5, 0x71, 0xe8, 0x52, 0xce, 0x85, 0xa2,
	0x2a, 0x14, 0x5c, 0xe6, 0x34, 0xe7, 0x50, 0x7f, 0x8c, 0x8e, 0x02, 0xc6, 0x8f, 0x64, 0x4a, 0x83,
	0x80, 0x25, 0xae, 0x88, 0x35, 0xe3, 0x5f, 0x36, 0x69, 0x81, 0xf9, 0x62, 0x12, 0xab, 0xa9, 0xc7,
	0x3e, 0x7e, 0x62, 0x52, 0x11, 0x13, 0xa0, 0xc0, 0x71, 0x34, 0x25, 0x4f, 0x61, 0xfb, 0x75, 0x28,
	0xd5, 0x1b, 0xc6, 0xa5, 0x48, 0xa4, 0xc7, 0x64, 0x2c, 0xb8, 0x64, 0xf8, 0x08, 0x1a, 0x32, 0x2f,
	0x75, 0x8c, 0x6e, 0x75, 0xbf, 0x79, 0xb2, 0xd5, 0x2b, 0xbc, 0xf5, 0x86, 0xec, 0x2a, 0x1c, 0x31,
	0x6f, 0xde, 0x27, 0x0f, 0xa0, 0x9d, 0xbf, 0xf6, 0x68, 0x3a, 0xa4, 0x8a, 0x16, 0x3a, 0xd8, 0x82,
	0x4a, 0xe8, 0x77, 0x8c, 0xae, 0xb1, 0xff, 0xbf, 0x57, 0x09, 0x7d, 0x72, 0x0c, 0x3b, 0xd7, 0x78,
	0x85, 0x56, 0x07, 0x1a, 0x31, 0x9d, 0x46, 0x82, 0xce, 0xd9, 0x73, 0x48, 0x86, 0xd0, 0xce, 0xcc,
	0x0d, 0x43, 0x19, 0x47, 0x74, 0xba, 0x70, 0x77, 0x08, 0x9b, 0x7e, 0x51, 0x2b, 0xec, 0xd9, 0x0b,
	0x7b, 0x79, 0xc3, 0x2b, 0x19, 0x64, 0x0f, 0x9a, 0xc3, 0x84, 0xa6, 0x37, 0xf9, 0xfa, 0x69, 0x40,
	0x3d, 0xdf, 0xe9, 0x7a, 0x0b, 0x11, 0x6a, 0x9c, 0x4e, 0x58, 0xa7, 0xa2, 0x2b, 0xfa, 0x3b, 0xb6,
	0x61, 0x63, 0x22, 0x7c, 0x16, 0x75, 0xaa, 0xba, 0x98, 0x03, 0x74, 0x60, 0x73, 0x2c, 0xa4, 0xd2,
	0xec, 0x9a, 0x6e, 0x94, 0x98, 0x9c, 0x41, 0xed, 0xed, 0x34, 0x66, 0xd8, 0x84, 0xc6, 0x05, 0xbf,
	0xe4, 0x22, 0xe5, 0xf6, 0x7f, 0x19, 0x28, 0x9c, 0xda, 0x06, 0x02, 0xd4, 0xf3, 0x9f, 0xc6, 0xae,
	0xa0, 0x09, 0x9b, 0xe7, 0x09, 0x93, 0x8c, 0x8f, 0x98, 0x5d, 0x25, 0xef, 0x4a, 0x1a, 0x3e, 0x84,
	0xba, 0xaf, 0x6d, 0x6a, 0x83, 0x6b, 0x2e, 0x52, 0xb4, 0x33, 0x87, 0x69, 0xe8, 0xab, 0xb1, 0xb6,
	0x6d, 0x79, 0x39, 0xc0, 0x5b, 0x50, 0x1f, 0xb3, 0x30, 0x18, 0x2b, 0x6d, 0xdc, 0xf2, 0x0a, 0x74,
	0xf2, 0xab, 0x0a, 0xcd, 0x97, 0x11, 0x9d, 0xb0, 0x73, 0x3d, 0x0c, 0x03, 0x68, 0x2e, 0x05, 0x02,
	0x77, 0x4a, 0x95, 0xe5, 0x10, 0x39, 0xbb, 0x65, 0x79, 0x4d, 0x7a, 0xc8, 0xbd, 0xd9, 0xc0, 0xc2,
	0xe5, 0x31, 0xdf, 0x7f, 0xff, 0xf9, 0x51, 0xb1, 0xb0, 0xe9, 0x5e, 0x1d, 0xbb, 0x45, 0x6e, 0xf0,
	0x9b, 0x01, 0xf6, 0x2b, 0xa6, 0x56, 0x32, 0x81, 0x7b, 0xe5, 0xdc, 0x75, 0x99, 0x72, 0xee, 0xdc,
	0xd4, 0x2e, 0x84, 0x8f, 0x66, 0x83, 0x2d, 0xb4, 0x56, 0x7a, 0x5a, 0x7a, 0x07, 0xb7, 0x17, 0xd2,
	0xee, 0x97, 0xd0, 0xff, 0xea, 0x26, 0x34, 0xc5, 0x4b, 0x30, 0x97, 0xf3, 0x75, 0xd3, 0xb2, 0x7b,
	0x2b, 0xcb, 0x5e, 0x4f, 0x23, 0xb9, 0x3f, 0x1b, 0xb4, 0x70, 0x65, 0x90, 0xd6, 0x6c, 0xa1, 0x99,
	0x69, 0xce, 0x63, 0x88, 0x17, 0x50, 0xcb, 0x62, 0x88, 0xed, 0xc5, 0xdd, 0x16, 0xa9, 0x74, 0xd6,
	0x56, 0xc9, 0xdd, 0xd9, 0xa0, 0x8e, 0xfa, 0x99, 0x1e, 0x89, 0x8e, 0xa5, 0x47, 0x26, 0x34, 0xd5,
	0x4b, 0x9c, 0x19, 0x07, 0xcf, 0x4e, 0x67, 0x83, 0x27, 0xd8, 0x85, 0xdb, 0xfa, 0x86, 0xdd, 0xfc,
	0x88, 0xdd, 0xe7, 0x82, 0xab, 0x44, 0x44, 0x11, 0x4b, 0x4e, 0x36, 0xfa, 0xbd, 0xe3, 0x5e, 0xdf,
	0x69, 0x45, 0x62, 0x44, 0xa3, 0x2c, 0x93, 0x67, 0xa7, 0xfd, 0xd3, 0xfe, 0x81, 0x61, 0xbc, 0xaf,
	0xeb, 0xff, 0x87, 0xc7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x60, 0xe0, 0x3e, 0x8a, 0x84, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FlamePixelsClient is the client API for FlamePixels service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlamePixelsClient interface {
	ListSensors(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListSensorsResponse, error)
	GetSensorRawData(ctx context.Context, in *SensorRawDataRequest, opts ...grpc.CallOption) (*SensorRawDataResponse, error)
	ListDisplays(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListDisplaysResponse, error)
	Draw(ctx context.Context, in *DrawRequest, opts ...grpc.CallOption) (*DrawRequest, error)
}

type flamePixelsClient struct {
	cc *grpc.ClientConn
}

func NewFlamePixelsClient(cc *grpc.ClientConn) FlamePixelsClient {
	return &flamePixelsClient{cc}
}

func (c *flamePixelsClient) ListSensors(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListSensorsResponse, error) {
	out := new(ListSensorsResponse)
	err := c.cc.Invoke(ctx, "/fpixels.FlamePixels/ListSensors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flamePixelsClient) GetSensorRawData(ctx context.Context, in *SensorRawDataRequest, opts ...grpc.CallOption) (*SensorRawDataResponse, error) {
	out := new(SensorRawDataResponse)
	err := c.cc.Invoke(ctx, "/fpixels.FlamePixels/GetSensorRawData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flamePixelsClient) ListDisplays(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListDisplaysResponse, error) {
	out := new(ListDisplaysResponse)
	err := c.cc.Invoke(ctx, "/fpixels.FlamePixels/ListDisplays", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flamePixelsClient) Draw(ctx context.Context, in *DrawRequest, opts ...grpc.CallOption) (*DrawRequest, error) {
	out := new(DrawRequest)
	err := c.cc.Invoke(ctx, "/fpixels.FlamePixels/Draw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlamePixelsServer is the server API for FlamePixels service.
type FlamePixelsServer interface {
	ListSensors(context.Context, *EmptyRequest) (*ListSensorsResponse, error)
	GetSensorRawData(context.Context, *SensorRawDataRequest) (*SensorRawDataResponse, error)
	ListDisplays(context.Context, *EmptyRequest) (*ListDisplaysResponse, error)
	Draw(context.Context, *DrawRequest) (*DrawRequest, error)
}

// UnimplementedFlamePixelsServer can be embedded to have forward compatible implementations.
type UnimplementedFlamePixelsServer struct {
}

func (*UnimplementedFlamePixelsServer) ListSensors(ctx context.Context, req *EmptyRequest) (*ListSensorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSensors not implemented")
}
func (*UnimplementedFlamePixelsServer) GetSensorRawData(ctx context.Context, req *SensorRawDataRequest) (*SensorRawDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensorRawData not implemented")
}
func (*UnimplementedFlamePixelsServer) ListDisplays(ctx context.Context, req *EmptyRequest) (*ListDisplaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDisplays not implemented")
}
func (*UnimplementedFlamePixelsServer) Draw(ctx context.Context, req *DrawRequest) (*DrawRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Draw not implemented")
}

func RegisterFlamePixelsServer(s *grpc.Server, srv FlamePixelsServer) {
	s.RegisterService(&_FlamePixels_serviceDesc, srv)
}

func _FlamePixels_ListSensors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlamePixelsServer).ListSensors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fpixels.FlamePixels/ListSensors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlamePixelsServer).ListSensors(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlamePixels_GetSensorRawData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorRawDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlamePixelsServer).GetSensorRawData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fpixels.FlamePixels/GetSensorRawData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlamePixelsServer).GetSensorRawData(ctx, req.(*SensorRawDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlamePixels_ListDisplays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlamePixelsServer).ListDisplays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fpixels.FlamePixels/ListDisplays",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlamePixelsServer).ListDisplays(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlamePixels_Draw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlamePixelsServer).Draw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fpixels.FlamePixels/Draw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlamePixelsServer).Draw(ctx, req.(*DrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlamePixels_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fpixels.FlamePixels",
	HandlerType: (*FlamePixelsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSensors",
			Handler:    _FlamePixels_ListSensors_Handler,
		},
		{
			MethodName: "GetSensorRawData",
			Handler:    _FlamePixels_GetSensorRawData_Handler,
		},
		{
			MethodName: "ListDisplays",
			Handler:    _FlamePixels_ListDisplays_Handler,
		},
		{
			MethodName: "Draw",
			Handler:    _FlamePixels_Draw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fpixel.proto",
}
